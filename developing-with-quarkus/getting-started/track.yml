slug: developing-with-quarkus-getting-started
id: riixlttwv5ye
type: track
title: Getting Started with Quarkus
description: |-
  In this scenario, you will get an introduction to [Quarkus](https://quarkus.io).

  ## What is Quarkus?

  ![Logo](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/quarkus/quarkus-logo.png)

  ### Supersonic, Subatomic Java

  For years, the client-server architecture has been the de-facto standard to build applications. But a major shift happened. The _one model rules them all_ age is over. A new range of applications and architecture styles has emerged and impacts how code is written and how applications are deployed and executed. HTTP microservices, reactive applications, message-driven microservices and serverless are now central players in modern systems.

  Quarkus has been designed with this new world in mind, and provides first-class support for these different paradigms. Quarkus development model morphs to adapt itself to the type of application you are developing.

  Quarkus is a Kubernetes Native Java stack tailored for GraalVM & OpenJDK HotSpot, crafted from the best of breed Java libraries and standards. Amazingly fast boot time, incredibly low RSS memory (not just heap size!) offering near instant scale up and high density memory utilization in container orchestration platforms like Kubernetes. Quarkus uses a technique called compile time boot. [Learn more](https://quarkus.io/vision/container-first).

  ### Unifies Imperative and Reactive

  Application requirements have changed drastically over the last few years. For any application to succeed in the era of cloud computing, big data or IoT, going reactive is increasingly becoming the architecture style to follow.

  Quarkus combines both the familiar imperative code and the non-blocking reactive style when developing applications.

  ### Functions as a Service and Serverless

  Thanks to their stellar startup time and low memory usage, you can implement functions using Quarkus to be used in serverless environments like AWS Lambda. You can use any of the Quarkus features in your function and benefit from the fast startup and low memory utilization. With Quarkus, you can embrace this new world without having to change your programming language.

  ### Developer Joy
  Quarkus provides a cohesive platform for optimized _developer joy_:

  * Unified configuration
  * Zero config, live reload in the blink of an eye
  * Streamlined code for the 80% common usages, flexible for the 20%
  * No hassle native executable generation

  ### Other possibilities

  Learn more at [quarkus.io](https://quarkus.io), or just drive on and get hands-on!
icon: https://logodix.com/logo/1910931.png
level: beginner
tags:
- openshift
owner: openshift
developers:
- doh@redhat.com
private: false
published: true
challenges:
- slug: 01-create-project
  id: dowq7nqofdug
  type: challenge
  title: Step 1
  notes:
  - type: text
    contents: |-
      In this scenario, you will get an introduction to [Quarkus](https://quarkus.io).

      ## What is Quarkus?

      ![Logo](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/quarkus/quarkus-logo.png)

      ### Supersonic, Subatomic Java

      For years, the client-server architecture has been the de-facto standard to build applications. But a major shift happened. The _one model rules them all_ age is over. A new range of applications and architecture styles has emerged and impacts how code is written and how applications are deployed and executed. HTTP microservices, reactive applications, message-driven microservices and serverless are now central players in modern systems.

      Quarkus has been designed with this new world in mind, and provides first-class support for these different paradigms. Quarkus development model morphs to adapt itself to the type of application you are developing.

      Quarkus is a Kubernetes Native Java stack tailored for GraalVM & OpenJDK HotSpot, crafted from the best of breed Java libraries and standards. Amazingly fast boot time, incredibly low RSS memory (not just heap size!) offering near instant scale up and high density memory utilization in container orchestration platforms like Kubernetes. Quarkus uses a technique called compile time boot. [Learn more](https://quarkus.io/vision/container-first).

      ### Unifies Imperative and Reactive

      Application requirements have changed drastically over the last few years. For any application to succeed in the era of cloud computing, big data or IoT, going reactive is increasingly becoming the architecture style to follow.

      Quarkus combines both the familiar imperative code and the non-blocking reactive style when developing applications.

      ### Functions as a Service and Serverless

      Thanks to their stellar startup time and low memory usage, you can implement functions using Quarkus to be used in serverless environments like AWS Lambda. You can use any of the Quarkus features in your function and benefit from the fast startup and low memory utilization. With Quarkus, you can embrace this new world without having to change your programming language.

      ### Developer Joy
      Quarkus provides a cohesive platform for optimized _developer joy_:

      * Unified configuration
      * Zero config, live reload in the blink of an eye
      * Streamlined code for the 80% common usages, flexible for the 20%
      * No hassle native executable generation

      ### Other possibilities

      Learn more at [quarkus.io](https://quarkus.io), or just drive on and get hands-on!
  assignment: |
    In this step, you will create a straightforward application serving a `hello` endpoint. To demonstrate dependency injection this endpoint uses a `greeting` bean.

    ![Architecture](https://katacoda.com/openshift/assets/middleware/quarkus/arch.png)

    # Wait for prerequisite downloads

    A suitable Java runtime is being installed and should take less than a minute. Once it's done, continue below!

    # Create basic project

    The easiest way to create a new Quarkus project is to copy the following command and paste it to `Terminal 1`:

    ```
    cd /root/projects/quarkus/
    mvn io.quarkus:quarkus-maven-plugin:2.0.0.Final:create \
        -DprojectGroupId=org.acme \
        -DprojectArtifactId=getting-started \
        -DclassName="org.acme.quickstart.GreetingResource" \
        -Dpath="/hello"
    ```

    This will use the Quarkus Maven Plugin and generate a basic Maven project for you in the `getting-started` subdirectory, generating:

    * The Maven structure
    * An `org.acme.quickstart.GreetingResource` resource exposed on `/hello`
    * An associated unit test
    * A landing page that is accessible on `http://localhost:8080` after starting the application
    * Example `Dockerfile`s for a variety of build targets (native, jvm, etc)
    * The application configuration file

    Once generated, navigate to the `getting-started/pom.xml` in `Visual Editor`. You will find the import of the Quarkus BOM, allowing to omit the version on the different Quarkus dependencies. In addition, you can see the `quarkus-maven-plugin` responsible of the packaging of the application and also providing the development mode.

    ```xml
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>${quarkus.platform.group-id}</groupId>
            <artifactId>${quarkus.platform.artifact-id}</artifactId>
            <version>${quarkus.platform.version}</version>
            <type>pom</type>
            <scope>import</scope>
          </dependency>
        </dependencies>
      </dependencyManagement>
    ```

    If we focus on the dependencies section, you can see we are using [Quarkus extensions](https://quarkus.io/extensions/) allowing the development and testing of REST applications:
    ```xml
      <dependencies>
        <dependency>
          <groupId>io.quarkus</groupId>
          <artifactId>quarkus-arc</artifactId>
        </dependency>
        <dependency>
          <groupId>io.quarkus</groupId>
          <artifactId>quarkus-resteasy</artifactId>
        </dependency>
        <dependency>
          <groupId>io.quarkus</groupId>
          <artifactId>quarkus-junit5</artifactId>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>io.rest-assured</groupId>
          <artifactId>rest-assured</artifactId>
          <scope>test</scope>
        </dependency>
      </dependencies>
    ```

    During the project creation, the `getting-started/src/main/java/org/acme/quickstart/GreetingResource.java` file has been created with the following endpoint:

    ```java
    @Path("/hello")
    public class GreetingResource {

        @GET
        @Produces(MediaType.TEXT_PLAIN)
        public String hello() {
            return "Hello RESTEasy";
        }
    }
    ```
    It’s a very simple REST endpoint, returning "hello" to requests on `/hello`.

    > Compared to vanilla JAX-RS, with Quarkus there is no need to create an `Application` class. It’s supported but not required. In addition, only one instance of the resource is created and not one per request. You can configure this using the different `*Scoped` annotations (`ApplicationScoped`, `RequestScoped`, etc).

    # Running the Application

    Now we are ready to run our application. Copy the following Maven command in Terminal 1:

    ```
    mvn quarkus:dev -Dquarkus.http.host=0.0.0.0 -f /root/projects/quarkus/getting-started
    ```

    You should see:

    ```console
    __  ____  __  _____   ___  __ ____  ______
     --/ __ \/ / / / _ | / _ \/ //_/ / / / __/
     -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\ \
    --\___\_\____/_/ |_/_/|_/_/|_|\____/___/
    INFO  [io.quarkus] (Quarkus Main Thread) getting-started 1.0.0-SNAPSHOT on JVM (powered by Quarkus x.x.x.Final) started in 1.194s. Listening on: http://0.0.0.0:8080
    INFO  [io.quarkus] (Quarkus Main Thread) Profile dev activated. Live Coding activated.
    INFO  [io.quarkus] (Quarkus Main Thread) Installed features: [cdi, resteasy]
    --
    Tests paused, press [r] to resume, [h] for more options>
    ```

    Note the amazingly fast startup time! Once started, you can request the provided endpoint in *Hello App* Tab.

    You should see:

    ```console
    Hello RESTEasy
    ```
    It's working!

    Now, let's exercise the **live reload** capabilities of Quarkus. From the *Visual Editor* Tab, open this file: `getting-started/src/main/java/org/acme/quickstart/GreetingResource.java`.
    Change `return "Hello RESTEasy";` to `return "Hola RESTEasy";` on line 14 in the editor. Click on the `disk`` icon to save the files or press `Ctrl + s:

    ![Visual Editor](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/quarkus/save-file.png)

    Don't recompile or restart anything. Just try to reload the *Hello App* tab again:

    ![Hello App](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/quarkus/reload-app.png)

    You should see the updated `hola` message.

    Wow, how cool is that? Supersonic Subatomic live reload! Go ahead and change it a few more times and access the endpoint again. And we're just getting started.

    > `quarkus:dev` runs Quarkus in development mode. This enables live reload with background compilation, which means that when you modify your Java files your resource files and refresh your browser these changes will automatically take effect.
    > This will also listen for a debugger on port `5005`. If your want to wait for the debugger to attach before running you can pass `-Ddebug` on the command line. If you don’t want the debugger at all you can use `-Ddebug=false`.

    # The Dev UI

    When running in Developer mode, Quarkus apps expose a useful UI for inspecting and making on-the-fly changes to the app (much like live coding mode). It allows you to quickly visualize all the extensions currently loaded, see and edit their configuration values, see their status and go directly to their documentation.

    To access the Dev UI for your running app, open the *Dev UI* Tab.

    ![Dev UI](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/quarkus/dev-ui-overview.png)

    For example, click on the `Config Editor` link within the `Configuration` tile to see and make updates to configuration. This is super useful for developers to confirm code and configuration changes, or experiment with various settings.

    > **NOTE** The Dev UI is only enabled when in _developer_ mode. It is not deployed when in production mode, as it's designed for developers to use during development. For more detail on what you can do, check out the [Dev UI Guide](https://quarkus.io/guides/dev-ui).

    # Continuous Testing

    When in developer mode (via `mvn quarkus:dev`), Quarkus can automatically and continuously run your unit tests. You may have noticed in the console `Tests paused, press [r] to resume, [h] for more options>`. This is an indication that you can enter continuous test mode. Type `r` to turn continuous testing mode on in the console.

    Earlier, you changed `Hello` to `Hola` which broke the default unit test, and you can now see this in Terminal 1:

    ```
    Response body doesn't match expectation.
    Expected: is "Hello RESTEasy"
      Actual: Hola RESTEasy
    ```

    Let's fix the test. Change `Hola RESTEasy` back to `Hello RESTEasy` in the editor. As soon as you fix it, Quarkus automatically re-runs the test and you should now have passing tests:

    ```
    All 1 tests are passing (0 skipped), 1 tests were run in 389ms. Tests completed at 12:25:40 due to changes to GreetingResource.class.
    ```

    Quarkus analyses your unit tests and only re-runs the tests that are affected by code changes. It's one of many developer productivity features of Quarkus, providing immediate feedback to developers as they type. We'll leave the tests running continously just to ensure we don't mess up later.

    # Congratulations!

    You've seen how to build a basic app, package it as an executable JAR and start it up very quickly. You also saw how Quarkus can run tests continuously to turbocharge your development tasks and facilitate test-driven development. We'll leave the app running and rely on hot reload for the next steps.

    In the next step we'll inject a custom bean to showcase Quarkus' CDI capabilities.

    Make sure to stop the Quarkus Dev mode via pressing `CTRL-C` in Terminal 1.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root/projects/quarkus/
  - title: Hello App
    type: service
    hostname: crc
    path: /hello
    port: 8080
  - title: Dev UI
    type: service
    hostname: crc
    path: /q/dev
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: 02-inject-bean
  id: xqafjcyorgsc
  type: challenge
  title: Step 2
  assignment: |
    In the previous step you created a basic RESTful Java application with Quarkus. In this step we'll add a custom bean that will use the _ArC_ extension which provides a CDI-based dependency injection [solution](https://quarkus.io/guides/cdi-reference.html) tailored for the Quarkus architecture.

    ## Add Custom Bean

    Let’s modify the application and add a companion bean. From the *Visual Editor* Tab, create a new file in this path: `getting-started/src/main/java/org/acme/quickstart/GreetingService.java`:

    ![Create a file](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/quarkus/create-file.png)

    Open the `GreetingService.java` file then add the following code to this file:

    ```java
    package org.acme.quickstart;

    import javax.enterprise.context.ApplicationScoped;

    @ApplicationScoped
    public class GreetingService {

        private String hostname = System.getenv().getOrDefault("HOSTNAME", "unknown");

        public String greeting(String name) {
            return "hello " + name + " from " + hostname;
        }

    }
    ```

    Next, open the `getting-started/src/main/java/org/acme/quickstart/GreetingResource.java` class and then replace this code to inject the new bean and create a new endpoint using it:

    ```java
    package org.acme.quickstart;

    import javax.inject.Inject;
    import javax.ws.rs.GET;
    import javax.ws.rs.Path;
    import javax.ws.rs.PathParam;
    import javax.ws.rs.Produces;
    import javax.ws.rs.core.MediaType;

    @Path("/hello")
    public class GreetingResource {

        @Inject
        GreetingService service;

        @GET
        @Produces(MediaType.TEXT_PLAIN)
        @Path("/greeting/{name}")
        public String greeting(@PathParam("name") String name) {
            return service.greeting(name);
        }

        @GET
        @Produces(MediaType.TEXT_PLAIN)
        public String hello() {
            return "Hello RESTEasy";
        }
    }
    ```

    ## Inspect the results

    Run the Quarkus Dev mode in Terminal 1:


    ```
    mvn quarkus:dev -Dquarkus.http.host=0.0.0.0 -f /root/projects/quarkus/getting-started

    ```

    Check that it works as expected by opening the *Greeting Endpoint* Tab.

    Note we are exercising our new bean using the `/hello/greeting` endpoint, and you should see

    ```console
    hello quarkus from crc-dzk9v-master-0
    ```

    > In this case, `crc-dzk9v-master-0` is the hostname of the local host we are running on. It will be different for you!

    ## Add another test

    Let's add another test for Quarkus to run continuously for our new endpoint. Create a new file in this path: `getting-started/src/test/java/org/acme/quickstart/GreetingServiceTest.java`.

    Add the following code to this file:

    ```java
    package org.acme.quickstart;

    import io.quarkus.test.junit.QuarkusTest;
    import org.junit.jupiter.api.Test;

    import java.util.UUID;

    import static io.restassured.RestAssured.given;
    import static org.hamcrest.CoreMatchers.startsWith;

    @QuarkusTest
    public class GreetingServiceTest {

        @Test
        public void testGreetingEndpoint() {
            String uuid = UUID.randomUUID().toString();
            given()
              .pathParam("name", uuid)
              .when().get("/hello/greeting/{name}")
              .then()
                .statusCode(200)
                .body(startsWith("hello " + uuid));
        }

    }
    ```

    This test generates a random string (a UUID), and uses that to call into our new service, looking for the same random name in the returned value.

    Go to Terminal 1 then you should now see that both tests pass:

    Note: If you haven't start the continuous testing yet, press `r` in Terminal 1.

    ```
    All 2 tests are passing (0 skipped), 1 tests were run in 429ms. Tests completed at 12:35:33 due to changes to GreetingServiceTest.class.
    ```
    As you add more tests, Quarkus will simply continuously run them to produce the result in realtime.

    ## Congratulations!

    It's a familiar CDI-based environment for you Enterprise Java developers out there, with powerful mechanisms to reload your code _as you type_ (or very close to realtime). In the next step, we'll package and run it as a standalone executable JAR, which should also be familiar to microservice developers.

    Make sure to stop the Quarkus Dev mode via pressing `CTRL-C` in Terminal 1.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root/projects/quarkus/getting-started
  - title: Greeting Endpoint
    type: service
    hostname: crc
    path: /hello/greeting/quarkus
    port: 8080
  difficulty: basic
  timelimit: 100
- slug: 03-package-and-run
  id: npxb5umu42he
  type: challenge
  title: Step 3
  assignment: |+
    In the previous step you added a custom CDI bean to the app. Now it's time to package and run it as a self-contained JAR file.

    ### Package the app

    Package the application in Terminal 1:

    ```
    mvn package -f /root/projects/quarkus/getting-started
    ```

    It produces 2 jar files:

    * `target/getting-started-1.0.0-SNAPSHOT.jar` - containing just the classes and resources of the projects, it’s the regular artifact produced by the Maven build

    * `target/quarkus-app/quarkus-run.jar` - being an executable jar. Be aware that it’s not an über-jar as the dependencies are copied into several subdirectories (and would need to be included in any layered container image).

    See the files with this command in Terminal 1:

    ```
    cd /root/projects/quarkus/getting-started/
    ls -l target/*.jar target/quarkus-app/*.jar
    ```

    > **NOTE**: Quarkus uses the _fast-jar_ packaging by default. The fast-jar packaging format is introduced as an alternative to the default jar packaging format. The main goal of this new format is to bring faster startup times.

    ## Run the executable JAR

    You can run the packaged application by running the following command in Terminal 1:

    ```
    java -jar target/quarkus-app/quarkus-run.jar
    ```

    And then test it again using the *Greeting Endpoint* Tab.

    You should see:

    ```
    hello quarkus from crc-dzk9v-master-0
    ```
    Note the same hostname as before, and also note that since we're running it as a fast-jar, Quarkus runs in production mode (and does not enable continuous testing or other developer features).

    > The `Class-Path` entry of the `MANIFEST.MF` from the _runner jar_ explicitly lists the jars from the subdirectories under `target/quarkus-app`. So if you want to deploy your application somewhere, you need to copy the _runner jar_ as well as the folder structure under `target/quarkus-app`. If you want to create an Uber-jar with everything included, you can use `mvn package -DuberJar`.

    ## Cleanup

    Go back to the terminal and stop the app once again by pressing `CTRL-C`.

    ## Congratulations!

    You've packaged up the app as an executable JAR and learned a bit more about the mechanics of packaging. In the next step, we'll continue our journey and build a _native image_ and then we'll learn about the native executable creation and the packaging in a Linux container.

  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root/projects/quarkus/getting-started
  - title: Greeting Endpoint
    type: service
    hostname: crc
    path: /hello/greeting/quarkus
    port: 8080
  difficulty: basic
  timelimit: 100
- slug: 04-build-native
  id: liep5vzlwsis
  type: challenge
  title: Step 4
  assignment: |+
    Let’s now produce a native executable for our application. It improves the startup time of the application, and produces a minimal disk footprint. The executable would have everything to run the application including the "JVM" (shrunk to be just enough to run the application), and the application.

    ![Native process](https://katacoda.com/openshift/assets/middleware/quarkus/native-image-process.png)

    We will be using GraalVM, which includes a native compiler for producing native images for a number of languages, including Java. GraalVM is installed in `$GRAALVM_HOME`:

    ```
    echo $GRAALVM_HOME
    ```

    ## Build native image

    Within the `getting-started/pom.xml` is the declaration for the Quarkus Maven plugin which contains a profile named `native`:

    ```xml

        <profile>
          <id>native</id>
          <activation>
            <property>
              <name>native</name>
            </property>
          </activation>
          <build>
          ...
          <properties>
            <quarkus.package.type>native</quarkus.package.type>
          </properties>
        </profile>

    ```
    We use a profile because, you will see very soon, packaging the native image takes a few seconds. However, this compilation time is only incurred _once_, as opposed to _every_ time the application starts, which is the case with other approaches for building and executing JARs.

    Create a native executable by running the following command in Terminal 1:

    ```
    mvn clean package -Pnative -DskipTests -f /root/projects/quarkus/getting-started
    ```

    > Since we are on Linux in this environment, and the OS that will eventually run our application is also Linux, we can use our local OS to build the native Quarkus app. If you need to build native Linux binaries when on other OS's like Windows or Mac OS X, you can use `-Dquarkus.native.container-runtime=[podman | docker]`. You'll need either Docker or [Podman](https://podman.io) installed depending on which container runtime you want to use!

    This will take a minute or so to finish. Wait for it!

    In addition to the regular files, the build also produces `target/getting-started-1.0.0-SNAPSHOT-runner`. This is a native Linux binary. Run the following command in Terminal 1:

    ```
    file target/getting-started-1.0.0-SNAPSHOT-runner
    ```

    ```bash
    target/getting-started-1.0.0-SNAPSHOT-runner: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=61109b6a2cc71d269c61b3b964c419c22fbb038b, not stripped
    ```

    ## Run native image

    Since our environment here is Linux, you can _just run it_ in Terminal 1:

    ```
    ./target/getting-started-1.0.0-SNAPSHOT-runner
    ```

    Notice the amazingly fast startup time:

    ```bash
    INFO  [io.quarkus] (main) Quarkus x.xx.x started in 0.044s. Listening on: http://[::]:8080
    INFO  [io.quarkus] (main) Installed features: [cdi, resteasy]
    ```
    That's 44 milliseconds! Note that the startup time can be shown a bit differently on your environment.

    And extremely low memory usage as reported by the Linux `ps` utility. Run the following command in Terminal 2:

    ```
    ps -o pid,rss,command -p $(pgrep -f runner)
    ```

    You should see something like:

    ```bash
      PID   RSS COMMAND
     261971 53740 ./target/getting-started-1.0.0-SNAPSHOT-runner
    ```

    This shows that our process is taking around 53 MB of memory ([Resident Set Size](https://en.wikipedia.org/wiki/Resident_set_size), or RSS). Pretty compact!

    > Note that the RSS and memory usage of any app, including Quarkus, will vary depending your specific environment, and will rise as the application experiences load.

    Make sure the app is still working as expected. Run the following command in Terminal 2:

    ```bash
    curl http://localhost:8080/hello/greeting/quarkus
    ```

    Then, the output should look like:

    ```bash
    hello quarkus from crc-dzk9v-master-0
    ```

    Nice!

    ## Cleanup

    Press `CTRL-C` to stop our native app in Terminal 1.

    ## Congratulations!

    You've now built a Java application as an executable JAR and a Linux native binary. Now let's give our app superpowers by deploying to OpenShift as a Linux container image.

  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Terminal 2
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root/projects/quarkus/getting-started
  - title: Greeting Native Endpoint
    type: service
    hostname: crc
    path: /hello/greeting/quarkus
    port: 8080
  difficulty: basic
  timelimit: 300
- slug: 05-deploy-to-openshift
  id: qyzpzfyccatz
  type: challenge
  title: Step 5
  assignment: |+
    Now that we have our app built, let's move it into containers and into the cloud.

    ## Install OpenShift extension

    Quarkus offers the ability to automatically generate OpenShift resources based on sane default and user supplied configuration. The OpenShift extension is actually a wrapper extension that brings together the [kubernetes](https://quarkus.io/guides/deploying-to-kubernetes) and [container-image-s2i](https://quarkus.io/guides/container-image#s2i) extensions with defaults so that it’s easier for the user to get started with Quarkus on OpenShift.

    Run the following command to add it to our project in Terminal 1:

    ```bash
      mvn quarkus:add-extension -Dextensions="openshift" -f /root/projects/quarkus/getting-started
    ```

    ## Login to OpenShift

    Access the OpenShift Web Console to also login from the Web UI:

    ```
    oc get routes console -n openshift-console -o jsonpath='https://{.spec.host}{"\n"}'
    ```

    Copy the URL from the output of the above command and open it in your browser.


    We'll deploy our app as the `developer` user. Use the following credentials:

    * Username:
    ```
    developer
    ```

    * Password:
    ```
    developer
    ```

    Run the following command to login with the OpenShift CLI in Terminal 1:

    ```
    oc login -u developer -p developer
    ```

    You should see

    ```bash
    Login successful.

    You don't have any projects. You can try to create a new project, by running `oc new-project <projectname>`
    ```

    ## Create project

    For this scenario, let's create a project that you will use to house your applications. Click:

    ```
    oc new-project quarkus --display-name="Sample Quarkus App"
    ```

    ## Deploy application to OpenShift

    Now let's deploy the application itself. Run the following command which will build and deploy a Quarkus native application using the OpenShift extension (this will take a few minutes to complete as it rebuilds the native executable, generates a container image and pushes it into OpenShift):

    ```
    mvn clean package -Pnative -f /root/projects/quarkus/getting-started \
    -Dquarkus.kubernetes-client.trust-certs=true \
    -Dquarkus.container-image.build=true \
    -Dquarkus.kubernetes.deploy=true \
    -Dquarkus.kubernetes.deployment-target=openshift \
    -Dquarkus.openshift.expose=true \
    -Dquarkus.openshift.labels.app.openshift.io/runtime=quarkus
    ```

    The output should end with `BUILD SUCCESS`.

    For more details of the above options:

    * `quarkus.kubernetes-client.trust-certs=true` - We are using self-signed certs in this simple example, so this simply says to the extension to trust them.
    * `quarkus.container-image.build=true` - Instructs the extension to build a container image
    * `quarkus.kubernetes.deploy=true` - Instructs the extension to deploy to OpenShift after the container image is built
    * `quarkus.kubernetes.deployment-target=openshift` - Instructs the extension to generate and create the OpenShift resources (like `DeploymentConfig`s and `Service`s) after building the container
    * `quarkus.openshift.expose=true` - Instructs the extension to generate an OpenShift `Route`.
    * `quarkus.openshift.labels.app.openshift.io/runtime=quarkus` - Adds a nice-looking icon to the app when viewing the OpenShift Developer Topology

    Finally, make sure it's actually done rolling out:

    ```
    oc rollout status -w dc/getting-started
    ```

    Wait for that command to report following before continuing.
    `replication controller "getting-started-1" successfully rolled out`

    You can also see the app deployed in the OpenShift Web Console, from Developer Perspective select `quarkus` project and go to Topology view.

    You'll need to login with the same credentials as before:

    * Username: `developer`
    * Password: `developer`

    ![topology](https://katacoda.com/openshift/assets/middleware/quarkus/greetingtopology.png)

    So now our app is deployed to OpenShift

    And now we can access using `curl` once again.

    Get the URL from command line, from *Terminal 1* run this command to get the app's Route:

    ```bash
    APP_ROUTE=`oc get route getting-started -n quarkus -o jsonpath='{"http://"}{.spec.host}{"/hello/greeting/quarkus-on-openshift"}{"\n"}'`
    curl $APP_ROUTE
    ```

    You should see:

    ```console
    hello quarkus-on-openshift from getting-started-1-9sgsm
    ```

    > Your pod's name will be different from the above.

    ## Congratulations!

    This step covered the deployment of a Quarkus application on OpenShift. However, there is much more, and the integration with these environments has been tailored to make Quarkus applications execution very smooth. For instance, the health extension can be used for [health check](https://docs.openshift.com/container-platform/4.6/applications/application-health.html); the configuration support allows mounting the application configuration using [config maps](https://docs.openshift.com/container-platform/4.6/authentication/configmaps.html), the metric extension produces data _scrape-able_ by [Prometheus](https://prometheus.io/) and so on.

    But we'll move to the final chapter around scaling and try a few things.

  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 100
- slug: 06-scaling
  id: v9wxrteqt0hi
  type: challenge
  title: Step 6
  assignment: |
    Now that we have our app running on OpenShift, let's see what we can do.

    ## Restrict resources

    Let's make _sure_ our Quarkus app doesn't go beyond a reasonable amount of memory for each instance by setting _resource constraints_ on it. We'll go with 50 MB of memory as an upper limit (which is pretty thin, compared to your average Java app!). This will let us scale up quite a bit.
    Run the following command to set this limit in Terminal 1:

    ```
    oc set resources dc/getting-started --limits=memory=50Mi
    ```

    ## Scale the app

    With that set, let's see how fast our app can scale up to 10 instances:

    ```
    oc scale --replicas=10 dc/getting-started
    ```

    Note that you can ignore the warning message, _W1123 19:23:34.344132  306042 warnings.go:70] extensions/v1beta1 Scale is deprecated in v1.2+, unavailable in v1.16+_.

    Back in the OpenShift Developer Topology, you'll see the app scaling dynamically up to 10 pods:

    ![Scaling](https://katacoda.com/openshift/assets/middleware/quarkus/scaling.png)

    This should only take a few seconds to complete the scaling. Now that we have 10 pods running, let's hit it with some load:

    ```
    export APP_ROUTE=`oc get route getting-started -n quarkus -o jsonpath='{"http://"}{.spec.host}{"/hello/greeting/quarkus-on-openshift"}{"\n"}'`

    for i in {1..50} ; do curl $APP_ROUTE; sleep .05 ; done
    ```

    You can see the 10 instances of our Quarkus app being load-balanced and responding evenly:

    ```console
    hello quarkus-on-openshift from getting-started-2-tfvn4
    hello quarkus-on-openshift from getting-started-2-8f45l
    hello quarkus-on-openshift from getting-started-2-xgg97
    hello quarkus-on-openshift from getting-started-2-8xw8b
    ...
    ```

    > For more fun with load balancing and apps, checkout the [Red Hat Developer Istio Tutorial](https://bit.ly/istio-tutorial) and learn how to control this with much greater precision and flexibility!

    10 not enough? Let's try 50:

    ```
    oc scale --replicas=50 dc/getting-started
    ```

    Back in the Overview in the OpenShift Console, you'll see the app scaling dynamically up to 50 pods:

    ![Scaling to 50](https://katacoda.com/openshift/assets/middleware/quarkus/50pods.png)

    Once they are all up and running, try the same load again:

    ```
    for i in {1..50} ; do curl $APP_ROUTE; sleep .05 ; done
    ```

    And witness all 50 pods responding evenly to requests. Try doing that with your average Java app running in a container! This tutorial uses a single node OpenShift cluster, but in practice you'll have many more nodes, and can scale to hundreds or thousands of replicas if and when load goes way up.

    > 50 still not enough? Are you feeling lucky? Try **100**:

    ```
    oc scale --replicas=100 dc/getting-started
    ```

    and watch the magic on the OpenShift Web Console. It may take a bit of time for all 100 to spin up given this limited resource environment, but they will eventually!

    # Open the solution in an IDE in the Cloud!
    Want to continue exploring this solution on your own in the cloud? You can use the free [Red Hat CodeReady Workspaces](https://developers.redhat.com/products/codeready-workspaces/overview) IDE running on the free [Red Hat Developer Sandbox](http://red.ht/dev-sandbox). [Click here](https://workspaces.openshift.com) to login or to register if you are a new user. This free service expires after 30 days, but you can always enable a new free 30-day subscription.

    Once logged in, [click here](https://workspaces.openshift.com/f?url=https://raw.githubusercontent.com/openshift-katacoda/rhoar-getting-started/solution/quarkus/getting-started/devfile.yaml) to open the solution for this project in the cloud IDE. While loading, if it asks you to update or install any plugins, you can say no.

    ## Congratulations

    In this scenario you got a glimpse of the power of Quarkus apps, both traditional JVM-based as well as native builds. There is much more to Quarkus than fast startup times and low resource usage, so keep on exploring additional scenarios to learn more, and be sure to visit [quarkus.io](https://quarkus.io) to learn even more about the architecture and capabilities of this exciting new framework for Java developers.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: basic
  timelimit: 100
checksum: "6016430083541631293"
